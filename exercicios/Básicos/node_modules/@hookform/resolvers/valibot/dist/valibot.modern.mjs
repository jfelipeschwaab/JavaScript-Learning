import{toNestErrors as r}from"@hookform/resolvers";import{appendErrors as t}from"react-hook-form";import{safeParseAsync as e,getDotPath as o}from"valibot";function s(){return s=Object.assign?Object.assign.bind():function(r){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o])}return r},s.apply(this,arguments)}const a=(a,n,i={})=>async(c,p,f)=>{const l=!f.shouldUseNativeValidation&&"all"===f.criteriaMode,u=await e(a,c,s({},n,{abortPipeEarly:!l}));if(u.issues){const e={};for(const r of u.issues){const s=o(r);if(s&&(e[s]||(e[s]={message:r.message,type:r.type}),l)){const o=e[s].types,a=o&&o[r.type];e[s]=t(s,l,e,r.type,a?[].concat(a,r.message):r.message)}}return{values:{},errors:r(e,f)}}return{values:i.raw?c:u.output,errors:{}}};export{a as valibotResolver};
//# sourceMappingURL=valibot.modern.mjs.map
